乐观锁和悲观锁
多线程
spring实现原理，spring事务原理
springcloud
jdk1.8
jvm
hashmap原理，红黑树是1.8新增的



1. ArrayList中的elementData数组，LinkedList中指向头结点和尾结点的指针
   既然用于保存数据的变量都被transient修饰，ArrayList和LinkedList还能不能被序列化呢
   如果不把elementData申明为transient类型，那么序列化的时候里面的数据都会被序列化，
   但是elementData这个数组很大程序是存在空值的情况（即size《length），这时如果序列化就会导致磁盘空间被浪费
   ArrayList将elementData申明为transient，自己重写了writeObject方法，保证只序列化elementData中有数据的那部分


2. AVA序列化与反序列化就是JAVA对象与一串字节流之间的相互转换, 我们在程序中创建的JAVA对象只存在于JVM中,
    当程序退出时, 这些对象也就消失了, 而序列化正是为了将这些对象保存起来以仅将来使用,也可以将已经序列化的对象传送给其他JVM来使用,
    这些序列化的字节流是于JVM无关的, 也就是说一个JVM序列化的对象可以在另一个JVM中反序列化.

    使用JAVA提供的序列化机制有以下两条需要遵守的条件:
    该类必须直接实现java.io.Serializable接口或者间接从其继承树中实现该接口(也就是他的某个父类实现了这个接口);
    对于该类的所有无法序列化的属性(本文指字段field, 而不是严格意义上的属性property, 下同)必须使用transient修饰

    使用JDK提供的序列化机制时需要借助一对I/O流, ObjectOutputStream和ObjectInputStream, 这两个流分别是进行序列化和反序列化操作,
    通过ObjectOutputStream类的writeObject(obj)方法可以将对象写入到输出流中, 通过ObjectInputStream类的readObject()方法可以从该输入流中反序列化该对象出来

    JDK提供了一种扩展的方法来增加对序列化和反序列化的控制. 那就是可以让序列化的对象实现下面两个固定的方法
    private void writeObject(ObjectOutputStream oos) throws IOException {}
       private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException{}



activemq: 两种消息模式
1. 点对点
 这种模式主要建立在一个队列上，当连接一个列队的时候，发送端不需要知道接收端是否正在接收，可以直接向ActiveMQ发送消息，
 发送的消息，将会先进入队列中，如果有接收端在监听，则会发向接收端，如果没有接收端接收，则会保存在activemq服务器，直到接收端接收消息，
 点对点的消息模式可以有多个发送端，多个接收端，但是一条消息，只会被一个接收端给接收到，哪个接收端先连上ActiveMQ，则会先接收到，
 而后来的接收端则接收不到那条消息
2. 订阅模式
  订阅/发布模式，同样可以有着多个发送端与多个接收端，但是接收端与发送端存在时间上的依赖，就是如果发送端发送消息的时候，接收端并没有监听消息，
  那么ActiveMQ将不会保存消息，将会认为消息已经发送，换一种说法，就是发送端发送消息的时候，接收端不在线，是接收不到消息的，哪怕以后监听消息，
  同样也是接收不到的。这个模式还有一个特点，那就是，发送端发送的消息，将会被所有的接收端给接收到，不类似点对点，一条消息只会被一个接收端给接收到。


  ############## http://www.importnew.com 这是个不错的学习网站##############
  1. 解释内存中的栈(stack)、堆(heap)和静态区(static area)的用法。
  答：通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用内存中的栈空间；
  而通过new关键字和构造器创建的对象放在堆空间；程序中的字面量（literal）如直接书写的100、”hello”和常量都是放在静态区中。
  栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，理论上整个内存没有被其他进程使用的空间甚至硬盘上的虚拟内存
  都可以被当成堆空间来使用。

  String str = new String("hello");
  上面的语句中变量str放在栈上，用new创建出来的字符串对象放在堆上，而”hello”这个字面量放在静态区。

  2. 我们为编写的类重写hashCode方法时，可能会看到如下所示的代码，其实我们不太理解为什么要使用这样的乘法运算来产生哈希码
  （散列码），而且为什么这个数是个素数，为什么通常选择31这个数？前两个问题的答案你可以自己百度一下，选择31是因为可以用移位和减法运算来代替乘法，
  从而得到更好的性能。说到这里你可能已经想到了：31 * num 等价于(num << 5) – num，左移5位相当于乘以2的5次方再减去自身就相当于乘以31，
  现在的VM都能自动完成这个优化。

      private int areaCode;
      private String prefix;
      private String lineNumber;

      @Override
      public int hashCode() {
          final int prime = 31;
          int result = 1;
          result = prime * result + areaCode;
          result = prime * result
                  + ((lineNumber == null) ? 0 : lineNumber.hashCode());
          result = prime * result + ((prefix == null) ? 0 : prefix.hashCode());
          return result;
      }

      @Override
      public boolean equals(Object obj) {
          if (this == obj)
              return true;
          if (obj == null)
              return false;
          if (getClass() != obj.getClass())
              return false;
          PhoneNumber other = (PhoneNumber) obj;
          if (areaCode != other.areaCode)
              return false;
          if (lineNumber == null) {
              if (other.lineNumber != null)
                  return false;
          } else if (!lineNumber.equals(other.lineNumber))
              return false;
          if (prefix == null) {
              if (other.prefix != null)
                  return false;
          } else if (!prefix.equals(other.prefix))
              return false;
          return true;
      }

  3. java对于eqauls方法和hashCode方法是这样规定的：
  (1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；
  (2)如果两个对象的hashCode相同，它们并不一定相同。当然，你未必要按照要求去做，
  但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在Set集合中，同时增加新元素的效率会大大下降
  （对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。

  4. 实现高质量的equals方法的诀窍包括：
      1. 使用==操作符检查”参数是否为这个对象的引用”；
      2. 使用instanceof操作符检查”参数是否为正确的类型”；
      3. 对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；
      4. 编写完equals方法后，问自己它是否满足对称性、传递性、一致性；
      5. 重写equals时总是要重写hashCode；
      6. 不要将equals方法参数中的Object对象替换为其他的类型，在重写时不要忘掉@Override注解。



